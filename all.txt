
//README.md
# bluep

A minimal real-time collaborative text editor with a blue theme. Multiple users can connect and edit text simultaneously through their browsers.

## Features
- Real-time text synchronization across all connected clients
- WebSocket-based communication
- HTTPS support
- Minimalist blue interface
- Automatic local IP detection

## Installation

```bash
git clone https://github.com/glassontin/bluep.git
cd bluep
pip install fastapi uvicorn pillow
```

## SSL Certificate Setup
Generate self-signed certificates for HTTPS:
```bash
openssl req -x509 -newkey rsa:4096 -nodes -keyout key.pem -out cert.pem -days 365
```

## Usage
1. Run the server:
```bash
python bluep/bluep.py
```

2. Open your browser and navigate to:
```
https://<your-local-ip>:8500
```

## Dependencies
- FastAPI
- uvicorn
- Pillow
- Python 3.7+

## License
MIT License

Copyright (c) 2024 glassontin

//bluep/__init__.py
from .auth import TOTPAuth, SessionManager
from .config import Settings
from .websocket_manager import WebSocketManager
from .models import WebSocketMessage

__version__ = "0.3.0"

__all__ = [
    'TOTPAuth',
    'SessionManager',
    'Settings',
    'WebSocketManager',
    'WebSocketMessage'
]

//bluep/bluep.py
#!/usr/bin/env python3
from fastapi import FastAPI, Query, WebSocket, Request
from fastapi.responses import HTMLResponse, Response, RedirectResponse
from fastapi.templating import Jinja2Templates
import uvicorn
from PIL import Image
from io import BytesIO
import signal
import asyncio

from bluep.auth import TOTPAuth
from bluep.config import Settings
from bluep.websocket_manager import WebSocketManager
from bluep.models import WebSocketMessage

app = FastAPI()
templates = Jinja2Templates(directory="templates")
settings = Settings()
auth = TOTPAuth()
ws_manager = WebSocketManager()

@app.get("/setup")
async def setup():
    html = f"""
    <h1>Room Setup</h1>
    <img src="data:image/png;base64,{auth.qr_base64}">
    <p>Secret key: {auth.secret_key}</p>
    <p>Current token: {auth.totp.now()}</p>
    """
    return HTMLResponse(html)

@app.get("/login")
async def login(request: Request):
    return templates.TemplateResponse("login.html", {"request": request})

@app.get("/")
async def get(request: Request, response: Response, key: str = None):
    if not key:
        return RedirectResponse(url="/login")

    await auth.verify_and_create_session(key, request, response)

    return templates.TemplateResponse(
        "editor.html",
        {
            "request": request,
            "host_ip": settings.host_ip,
            "key": key,
            "blue": settings.blue_color
        }
    )

@app.websocket("/ws")
async def websocket_endpoint(websocket: WebSocket, key: str = Query(...)):
    if not auth.verify(key):
        await websocket.close(code=1008)
        return

    await ws_manager.connect(websocket)
    try:
        while True:
            msg = WebSocketMessage.model_validate_message(await websocket.receive_text())
            if msg.type == "content":
                ws_manager.update_shared_text(msg.data)
                await ws_manager.broadcast(msg.model_dump(exclude_none=True), exclude=websocket)
            elif msg.type == "cursor":
                cursor_data = msg.model_dump(exclude_none=True)
                cursor_data["clientId"] = id(websocket)
                await ws_manager.broadcast(cursor_data, exclude=websocket)
    except Exception as e:
        print(f"Error: {e}")
    finally:
        await ws_manager.disconnect(websocket)

@app.get("/favicon.png")
async def favicon(key: str = None):
    if not auth.verify(key):
        raise HTTPException(status_code=403)

    img = Image.new('RGB', (32, 32), settings.blue_color)
    buffer = BytesIO()
    img.save(buffer, format='PNG')
    return Response(content=buffer.getvalue(), media_type='image/png')

async def shutdown():
    print("\nClosing connections...")
    for client in ws_manager.active_connections:
        await client.close()
    exit(0)

def handle_shutdown(signum, frame):
    loop = asyncio.get_event_loop()
    loop.create_task(shutdown())

def main():
    signal.signal(signal.SIGINT, handle_shutdown)
    print(f"Server running at https://{settings.host_ip}:{settings.port}")
    print(f"https://{settings.host_ip}:{settings.port}/setup")

    config = uvicorn.Config(
        app,
        host="0.0.0.0",
        port=settings.port,
        ssl_keyfile=settings.ssl_keyfile,
        ssl_certfile=settings.ssl_certfile,
        loop="asyncio",
        timeout_graceful_shutdown=0
    )
    server = uvicorn.Server(config=config)
    server.run()

if __name__ == "__main__":
    main()

//dump_all.py
#!/usr/bin/env python3
import subprocess
import os

def concat_git_files(output_file="all.txt"):
    # Get tracked files respecting .gitignore
    files = subprocess.check_output(
        ["git", "ls-files"],
        text=True
    ).splitlines()

    # Filter by extension
    extensions = {".py", ".cpp", ".h", ".i", ".txt", ".md", ".html", ".js", ".toml"}
    files = [f for f in files if os.path.splitext(f)[1] in extensions]

    # Write concatenated output
    with open(output_file, "w") as outfile:
        for file in files:
            if os.path.basename(file) == output_file:
                continue
            print(file)
            outfile.write(f"\n//{file}\n")
            with open(file, "r") as infile:
                outfile.write(infile.read())

    print()
    print(f"=> {output_file}")

if __name__ == "__main__":
    concat_git_files()

//pyproject.toml
[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "bluep"
version = "0.3.0"
authors = [
  { name="GlassOnTin", email="63980135+GlassOnTin@users.noreply.github.com" },
]
description = "A minimal real-time collaborative text editor"
readme = "README.md"
requires-python = ">=3.7"
dependencies = [
    "fastapi>=0.68.0",
    "uvicorn>=0.15.0",
    "pillow>=8.0.0",
    "websockets>=10.0",
    "pyotp>=2.9.0",
    "qrcode>=8.0.0",
    "MarkupSafe>=3.0.2",
    "jinja2>=3.1.4",
    "pydantic>=1.10.0",
    "python-multipart>=0.0.6"
]

[project.scripts]
bluep = "bluep.bluep:main"

[tool.hatch.build.targets.wheel]
packages = ["bluep"]

[tool.hatch.build.targets.sdist]
include = [
    "/bluep",
    "/templates"
]

//templates/login.html
<!DOCTYPE html>
<html>
<head>
    <title>bluep login</title>
    <style>
        body {
            background: #0000ff;
            color: white;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
        }
        .login-form {
            text-align: center;
        }
        input {
            padding: 8px;
            margin: 10px;
            background: transparent;
            border: 1px solid white;
            color: white;
        }
        button {
            padding: 8px 16px;
            background: white;
            color: #0000ff;
            border: none;
            cursor: pointer;
        }
    </style>
</head>
<body>
    <div class="login-form">
        <h1>bluep</h1>
        <form action="/" method="get">
            <input type="text" name="key" placeholder="Enter TOTP code" required autofocus>
            <button type="submit">Enter</button>
        </form>
    </div>
</body>
</html>
